/* Resolution of the Laplace equation using a fictitious domain method: control resolution */
load "medit"

/* Building mesh of the exact domain */
border left1(t=0.0,0.2){x=0.0; y=1.0-t;label=1;}
border top1(t=0.0,0.8){x=t; y=0.8-0.25*t; label=0;}
border right1(t=0.0,0.2){x=0.8; y=0.6-t; label=0;}
border bot1(t=0.0,0.8){x=0.8-t; y=0.4-0.25*t; label=0;}
border left2(t=0.0,0.2){x=0.0; y=0.2-t; label=1;}
border bot2(t=0.0,1.0){x=t; y=0.25*t; label=0;}
border right2(t=0.0,0.5){x=1.0; y=0.25+t; label=2;}
border top2(t=0.0,1.0){x=1.0-t; y=0.75+0.25*t; label=0;}

mesh Th=buildmesh(left1(20)+top1(80)+right1(20)+bot1(80)+left2(20)+bot2(100)+right2(50)+top2(100));
plot(Th);

/* Finite Element space and functions */
fespace Vh(Th,P1);
Vh un,ud,v;

/* Temperature on boundary 1 */
func real uin (real a) {
  if ( a>0.8 ) return(100.0*(1.0-a)*(a-0.8));
  else if (  a<0.2 ) return(100.0*a*(0.2-a));
}

/* Flux at boundary 2 */
real gout = -1.0;

/* Problem with homogeneous Neumann conditions on boundary 0 */
problem laplaceneu(un,v) = int2d(Th)(dx(un)*dx(v)+dy(un)*dy(v))
                          - int1d(Th,2)(gout*v) 
                          + on(1,un=uin(y));

/* Problem with homogeneous Neumann conditions on boundary 0 */
problem laplacedir(ud,v) = int2d(Th)(dx(ud)*dx(v)+dy(ud)*dy(v))
                           - int1d(Th,2)(gout*v)
                           + on(0,ud=0.0)
                           + on(1,ud=uin(y));

laplaceneu;
laplacedir;

/* Save mesh and solutions */
savemesh(Th,"ersatz.mesh");
savesol("exdir.sol",Th,ud);
savesol("exneu.sol",Th,un);
