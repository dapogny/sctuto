/* Evolution of a domain by the level set method, under an analytical velocity field */
load "medit"
load "distance"

/* File names */
string OUTPUT = "box";

/* Create mesh of the computational domain */
border left(t=0.0,1.0){x=0.0; y=1.0-t; label=0; };
border bot(t=0.0,1.0){x=t; y=0.0; label=0; };
border right(t=0.0,1.0){x=1.0; y=t; label=0; };
border top(t=0.0,1.0){x=1.0-t; y=1.0; label=0; };

mesh Th = buildmesh(left(100)+bot(100)+right(100)+top(100));

/* Finite Element spaces */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);
Vh phi,phi0;
Vh met,phitmp; // Used in macros
Vh Vx,Vy;
real Tfin = 4.0;
real tcur;
int maxit = 400;
real dt   = Tfin / maxit;
real hmin = 0.001, hmax = 0.2, thick=1.;

/* Level set function for the initial domain */
phi = sqrt( (x-0.5)^2 + (y-0.75)^2 ) - 0.15;

/* Macros for the velocity field */
macro velx(xx,yy,tt) ( - (sin(pi*xx))^2 * sin(2.0*pi*yy) * cos(pi*tt/Tfin) ) // EOM
macro vely(xx,yy,tt) (   (sin(pi*yy))^2 * sin(2.0*pi*xx) * cos(pi*tt/Tfin) ) // EOM

/* Include LS toolbox */
include "LStools.idp"

/* Main loop for the resolution of the problem */
for (int n=0; n<maxit; n++) {
  cout<<"Iteration "<<n<<endl;
  
  tcur = n*dt;
  Vx   = velx(x,y,tcur);
  Vy   = vely(x,y,tcur);
  
  /* Advection and redistanciation of the LS function */
  advectRedist(phi,Vx,Vy,dt);
  
  /* Mesh adaptation */
  adapLS(phi,hmin,hmax,thick);
  
  /* Interpolation of phi on the new mesh */
  phi = phi;
  
  /* Save data */
  savemesh(Th,OUTPUT+"."+n+".mesh");
  savesol(OUTPUT+"."+n+".sol",Th,phi);
}

