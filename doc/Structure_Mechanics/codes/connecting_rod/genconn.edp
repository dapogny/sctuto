/* Create a mesh of a connecting rod from the datum of a black-and-white image (in jpg)
   !!!! The command line "convert" from ImageMagick must be available !!!! */
load "ppm2rnm"
load "isoline"
load "medit"

/* Convert input image into pgm format */
string INPUT      = "conn.jpg";
string INPUTPGM   = "conn.pgm";
string OUTPUT     = "conn.mesh";

/* References */
int REFDIR        = 1;
int REFNEU        = 2;

exec("convert "+INPUT+" "+INPUTPGM);

/* Read image and get data */
real[int,int] img(INPUTPGM);
int nx = img.n;
int ny = img.m;

/* Creation of a square mesh adapted to the pixellisation of the image */
mesh Th = square(nx-1,ny-1,[(nx-1)*(x),(ny-1)*(1-y)]);
fespace Vh(Th,P1);
Vh u;
u[] = img;

/* Extraction of the 0.5 isoline */
real[int,int] ver(3,1); // Table for the vertices of the isoline (will be resized automatically)
int[int] be(1); // Table for the beginning and end of each curve portion (will be resized automatically)
real thres = 0.5;

int nc = isoline(Th,u,iso=thres,close=1,ver,beginend=be,smoothing=0.1);

/* Endpoints of the longest isoline */
int ip0 = be(0);
int ip1 = be(1)-1;
int ip2 = be(4);
int ip3 = be(5)-1;
int ip4 = be(6);
int ip5 = be(7)-1;
int npc = 500; // Desired number of vertices on the outer boundary
int npd = 80; // Desired number of vertices on the Dirichlet border
int npn = 50; // Desired number of vertices on the Neumann border

/* Parametrization of the border from the datum of the boundary points */
border BIso(t=0,1) {P=Curve(ver,ip0,ip1,t); label=10; }
border BHole1(t=0,1) {P=Curve(ver,ip2,ip3,t); label=REFDIR; }
border BHole2(t=0,1) {P=Curve(ver,ip4,ip5,t); label=REFNEU; }
border left(t=0,3) {x=-0.5*nx; y=2*ny-ny*t; label=1; }
border bot(t=0,2) {x=-0.5*nx+nx*t; y=-ny; label=0; }
border right(t=0,3) {x=1.5*nx; y=-ny+ny*t; label=2; }
border top(t=0,2) {x=1.5*nx-nx*t; y=2*ny; label=0; }

/* Creation of the mesh */
mesh Thfig = buildmesh(BIso(-npc)+BHole1(-npd)+BHole2(-npn));

/* Scaling Thfig between 0 and 1 */
real[int] bb(4);
boundingbox(Thfig,bb); // bb[0] = xmin, bb[1] = xmax, bb[2] = ymin, bb[3] = ymax

real[int] gc = [0.5*(bb[0]+bb[1]),0.5*(bb[2]+bb[3])];
real dd = max(bb[1]-bb[0],bb[3]-bb[2]);
dd = 1.0/dd;

Thfig = movemesh(Thfig,[dd*(x-gc[0]),dd*(y-gc[1])]);

/* Save mesh */
savemesh(Thfig,OUTPUT);
