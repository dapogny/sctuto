/* Enforcement of Dirichlet boundary conditions by the penalization method */
load "medit"

/* Definition of the boundary curves of the domain */
border left(t=0,1.0){ x=0.0 ; y=1.0-t; label=1;};
border bot(t=0,1.0){ x=t ; y=0.0; label=1;};
border right(t=0,0.5){ x=1.0 ; y=t; label=1;};
border ang1(t=0,0.5){ x=1.0-t ; y=0.5; label=1;};
border ang2(t=0,0.5){ x=0.5 ; y=0.5+t; label=1;};
border top(t=0,0.5){ x=0.5-t ; y=1.0; label=1;};

/* Build mesh*/
mesh Th = buildmesh(left(100)+bot(100)+right(50)+ang1(50)+ang2(50)+top(50));

/* Definition of Finite Element spaces and functions */
fespace Vh(Th,P1);
Vh u,v;

/* Penalization parameter */
real eps = 1.e-20;

/* Source term */
func real f() {
  return(1.0);
}

/* Stationary heat equation (solver = Conjugate Gradient) */
problem laplace(u,v,solver=CG) = int2d(Th)(dx(u)*dx(v)+dy(u)*dy(v))
                                  + int1d(Th,1)((1.0/eps)*u*v)  // Penalization for homogeneous Dirichlet B.C.
                                  - int2d(Th)(f()*v);

/* Resolution of the problem */
laplace;

/* Display and save the result */
savemesh(Th,"Lshape.mesh");
savesol("Lshape.sol",Th,u);
